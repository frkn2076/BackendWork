// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20200101131820_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entity.ChoosableOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuestionId");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ChoosableOption");
                });

            modelBuilder.Entity("DataAccess.Entity.CompletedSurveys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("SurveyId");

                    b.HasKey("Id");

                    b.ToTable("CompletedSurveys");
                });

            modelBuilder.Entity("DataAccess.Entity.Degree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DegreeId")
                        .IsRequired();

                    b.Property<string>("DegreeText")
                        .IsRequired();

                    b.Property<int?>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Degree");
                });

            modelBuilder.Entity("DataAccess.Entity.Jobs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("DataAccess.Entity.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("IsActive");

                    b.Property<string>("MailKey")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("DataAccess.Entity.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SurveyId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("DataAccess.Entity.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condition");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<decimal>("Money");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("DataAccess.Entity.UserInfo", b =>
                {
                    b.Property<decimal>("Tckn")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<decimal, decimal>(v => default(decimal), v => default(decimal), new ConverterMappingHints(precision: 20, scale: 0)));

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("City");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int?>("JobId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Sex");

                    b.Property<string>("Surname")
                        .IsRequired();

                    b.Property<string>("Town");

                    b.HasKey("Tckn");

                    b.HasIndex("JobId");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("DataAccess.Entity.ChoosableOption", b =>
                {
                    b.HasOne("DataAccess.Entity.Question")
                        .WithMany("ChoosableOptions")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("DataAccess.Entity.Degree", b =>
                {
                    b.HasOne("DataAccess.Entity.Question")
                        .WithMany("Degree")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("DataAccess.Entity.Question", b =>
                {
                    b.HasOne("DataAccess.Entity.Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("DataAccess.Entity.UserInfo", b =>
                {
                    b.HasOne("DataAccess.Entity.Jobs", "Job")
                        .WithMany()
                        .HasForeignKey("JobId");
                });
#pragma warning restore 612, 618
        }
    }
}
